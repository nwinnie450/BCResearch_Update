#!/usr/bin/env python3
"""
Production Setup Script for Blockchain Notification System
Helps configure OpenAI API key and other production settings securely
"""
import os
import sys
import getpass
from pathlib import Path

def create_env_file():
    """Create .env file with secure configuration"""
    print("üîê Setting up production environment configuration...")
    print()
    
    env_file = Path('.env')
    
    if env_file.exists():
        response = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå Setup cancelled.")
            return False
    
    # Collect configuration
    config = {}
    
    print("üìù Please provide your configuration:")
    print()
    
    # OpenAI API Key
    print("1. OpenAI API Key:")
    print("   Get from: https://platform.openai.com/api-keys")
    api_key = getpass.getpass("   Enter OpenAI API key (hidden): ").strip()
    if not api_key.startswith('sk-'):
        print("‚ö†Ô∏è  Warning: OpenAI API keys usually start with 'sk-'")
    config['OPENAI_API_KEY'] = api_key
    
    # Email configuration
    print("\n2. Email Configuration:")
    sender_email = input("   Sender email: ").strip()
    sender_password = getpass.getpass("   Email app password (hidden): ").strip()
    config['SENDER_EMAIL'] = sender_email
    config['SENDER_PASSWORD'] = sender_password
    
    # Slack configuration
    print("\n3. Slack Configuration:")
    slack_webhook = input("   Slack webhook URL: ").strip()
    config['SLACK_WEBHOOK_URL'] = slack_webhook
    
    # Optional OpenAI settings
    print("\n4. Optional OpenAI Settings (press Enter for defaults):")
    model = input("   Model (default: gpt-3.5-turbo): ").strip() or "gpt-3.5-turbo"
    max_tokens = input("   Max tokens (default: 1000): ").strip() or "1000"
    temperature = input("   Temperature (default: 0.3): ").strip() or "0.3"
    
    config['OPENAI_MODEL'] = model
    config['OPENAI_MAX_TOKENS'] = max_tokens
    config['OPENAI_TEMPERATURE'] = temperature
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write("# Blockchain Notification System - Production Configuration\n")
            f.write("# Generated by setup_production.py\n")
            f.write(f"# Created: {os.path.basename(sys.argv[0])} at {os.getcwd()}\n\n")
            
            f.write("# OpenAI Configuration\n")
            f.write(f"OPENAI_API_KEY={config['OPENAI_API_KEY']}\n")
            f.write(f"OPENAI_MODEL={config['OPENAI_MODEL']}\n")
            f.write(f"OPENAI_MAX_TOKENS={config['OPENAI_MAX_TOKENS']}\n")
            f.write(f"OPENAI_TEMPERATURE={config['OPENAI_TEMPERATURE']}\n\n")
            
            f.write("# Email Configuration\n")
            f.write(f"SENDER_EMAIL={config['SENDER_EMAIL']}\n")
            f.write(f"SENDER_PASSWORD={config['SENDER_PASSWORD']}\n")
            f.write("SMTP_SERVER=smtp.gmail.com\n")
            f.write("SMTP_PORT=587\n\n")
            
            f.write("# Slack Configuration\n")
            f.write(f"SLACK_WEBHOOK_URL={config['SLACK_WEBHOOK_URL']}\n")
            f.write("SLACK_CHANNEL=#faws_testing\n")
        
        print(f"\n‚úÖ Configuration saved to .env")
        
        # Ensure .env is in .gitignore
        gitignore_file = Path('.gitignore')
        if gitignore_file.exists():
            with open('.gitignore', 'r') as f:
                content = f.read()
            
            if '.env' not in content:
                with open('.gitignore', 'a') as f:
                    f.write('\n# Environment variables\n.env\n')
                print("‚úÖ Added .env to .gitignore")
        else:
            with open('.gitignore', 'w') as f:
                f.write("# Environment variables\n.env\n")
            print("‚úÖ Created .gitignore with .env")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

def test_configuration():
    """Test the configuration"""
    print("\nüß™ Testing configuration...")
    
    try:
        # Test environment loading
        from services.unified_impact_analyzer import UnifiedImpactAnalyzer
        
        analyzer = UnifiedImpactAnalyzer()
        
        if analyzer.ai_available:
            print("‚úÖ OpenAI API key loaded successfully")
        else:
            print("‚ùå OpenAI API key not found or invalid")
            return False
        
        # Test notification service
        from services.unified_notification_service import UnifiedNotificationService
        
        service = UnifiedNotificationService()
        
        # Check email config
        email_config = service.load_config(service.email_config_file)
        if email_config.get('enabled'):
            print("‚úÖ Email configuration loaded")
        else:
            print("‚ö†Ô∏è  Email configuration not enabled")
        
        # Check slack config  
        slack_config = service.load_config(service.slack_config_file)
        if slack_config.get('enabled'):
            print("‚úÖ Slack configuration loaded")
        else:
            print("‚ö†Ô∏è  Slack configuration not enabled")
        
        print("\nüéâ Configuration test completed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False

def show_deployment_commands():
    """Show deployment commands for different platforms"""
    print("\nüöÄ Deployment Commands:")
    print()
    
    print("üìß For Linux/MacOS (systemd service):")
    print("   sudo cp blockchain-notifier.service /etc/systemd/system/")
    print("   sudo systemctl enable blockchain-notifier")
    print("   sudo systemctl start blockchain-notifier")
    print()
    
    print("üê≥ For Docker deployment:")
    print("   docker build -t blockchain-notifier .")
    print("   docker run -d --env-file .env --name blockchain-notifier blockchain-notifier")
    print()
    
    print("‚òÅÔ∏è  For cloud deployment:")
    print("   - Set environment variables in your cloud platform")
    print("   - Use secrets management (AWS Parameter Store, Azure Key Vault, etc.)")
    print("   - Deploy with proper security groups and monitoring")
    print()

def main():
    """Main setup function"""
    print("üîß Blockchain Notification System - Production Setup")
    print("=" * 55)
    print()
    
    # Check if we're in the right directory
    if not Path('services/unified_impact_analyzer.py').exists():
        print("‚ùå Error: Please run this script from the project root directory")
        print("   Current directory:", os.getcwd())
        sys.exit(1)
    
    # Setup steps
    if create_env_file():
        if test_configuration():
            show_deployment_commands()
            print("\n‚úÖ Production setup completed successfully!")
            print("   Your system is ready for deployment with secure API key management.")
        else:
            print("\n‚ö†Ô∏è  Setup completed but configuration test failed.")
            print("   Please check your API keys and configuration.")
    else:
        print("\n‚ùå Setup failed. Please try again.")
        sys.exit(1)

if __name__ == "__main__":
    main()